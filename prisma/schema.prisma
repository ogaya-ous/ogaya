generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
  history       history[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model document {
  document_id      Int       @id @default(autoincrement())
  document_name    String
  document_path    String
  document_explain String
  added_year       Int
  added_month      Int
  added_day        Int
  delete_flag      Boolean   @default(false)
  complete_flag    Boolean   @default(false)
  history          history[]
  images           image[]
}

model image {
  image_id    Int      @id @default(autoincrement())
  document_id Int
  image_path  String
  added_year  Int
  added_month Int
  added_day   Int
  document    document @relation(fields: [document_id], references: [document_id], onDelete: Cascade)
}

model history {
  history_id       Int      @id @default(autoincrement())
  document_id      Int
  decoding_content String
  user_id          String
  added_day        Int
  added_month      Int
  added_year       Int
  decoding_gpt     String
  document         document @relation(fields: [document_id], references: [document_id])
  user             User     @relation(fields: [user_id], references: [id])
}

model news {
  news_id      Int     @id @default(autoincrement())
  news_name    String
  news_path    String
  news_explain String
  added_year   Int
  added_month  Int
  added_day    Int
  delete_flag  Boolean @default(false)
}

model decoded {
  decoded_id      Int     @id @default(autoincrement())
  decoded_name    String
  decoded_path    String
  decoded_explain String
  decoded_content String
  added_year      Int
  added_month     Int
  added_day       Int
  delete_flag     Boolean @default(false)
  view_flag       Boolean @default(false)
}
